@page "/cases/{id}"
@inject HttpClient Http
@inject NavigationManager NavManager
<Auth />

<h2>Create Case</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <section>
            <EditForm Model="@cases" OnSubmit="@UpdateCaseAsync">
                <div class="form-group mt-2">
                    <span>Case ID</span>
                    <input type="text" class="form-control" @bind="cases.Id" disabled />
                </div>
                <div class="form-group mt-2">
                    <span>Description</span>
                    <textarea type="text" class="form-control" @bind="cases.Descrip" required />
                </div>
                <div class="form-group mt-2">
                    <span>Created</span>
                    <input type="text" class="form-control" @bind="cases.Created" disabled />
                </div>
                <div class="form-group mt-2">
                    <span>Latest Update</span>
                    <input type="text" class="form-control" @bind="cases.LatestUpdate" disabled />
                </div>
                <select @bind="cases.StatusCode" class="form-group dropdown btn btn-info mt-2 " aria-label="Change Status" required>
                    <option value="Ej påbörjad">Ej påbörjad</option>
                    <option value="Pågår">Pågår</option>
                    <option value="Avslutad">Avslutad</option>
                </select>


                <hr />
                <div class="form-group mt-5">
                    <button type="submit" class="btn btn-info text-white">Update</button>
                </div>
            </EditForm>
        </section>
    </div>
</div>





@code {
    [Parameter]
    public string Id { get; set; }
    private HttpResponseMessage result;
    private Case cases { get; set; }


    protected override async Task OnInitializedAsync()
    {

        try
        {
            cases = new Case();
            var id = int.Parse(Id);
            cases = await Http.GetFromJsonAsync<Case>($"https://localhost:44350/api/cases/{id}");
        }
        catch { }

    }

    private async Task UpdateCaseAsync()
    {

        try
        {
            cases.LatestUpdate = DateTime.Now;
            result = await Http.PutAsJsonAsync<Case>($"https://localhost:44350/api/cases/{Id}", cases);

            if (result.IsSuccessStatusCode)
            {
                NavManager.NavigateTo("/cases");
            }
            else
            {
                NavManager.NavigateTo("/errorpage");
            }

        }
        catch { }
    }

}
